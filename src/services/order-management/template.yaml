AWSTemplateFormatVersion: 2010-09-09
Description: >-
  order-management-service code

Transform:
  - AWS::Serverless-2016-10-31

Resources:
  cancelOrderCommandHandler:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: app/
      Handler: dist/src/handlers/cancel-order.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Handle a cancel order command
      Events:
        Trigger:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - com.order-management
              detail-type:
                - cancel-order

  orderDispatchedHandler:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: app/
      Handler: dist/src/handlers/order-dispatched-event-handler.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Handle an order dispatched event from the event bus.
      Events:
        Trigger:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - com.kitchen
              detail-type:
                - order-dispatched

  startOrderAcceptance:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: app/
      Handler: dist/src/handlers/start-order-acceptance.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Sets up initial state orchestration for order acceptance

  stockChecker:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: app/
      Handler: dist/src/handlers/stock-checker.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Stock checker function used in order acceptance step function.

  paymentProcessor:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: app/
      Handler: dist/src/handlers/payment-processor.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Payment processing function used in order acceptance step function.

  orderAcceptanceResult:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: app/
      Handler: dist/src/handlers/order-acceptance-result.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Result handler for processing stock and payment results used in order acceptance step function.

  OrderAcceptanceStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: app/dist/src/infrastructure/state-machine/order-acceptance.asl.json
      DefinitionSubstitutions:
        StartOrderAcceptanceFunctionArn: !GetAtt startOrderAcceptance.Arn
        StockCheckerFunctionArn: !GetAtt stockChecker.Arn
        PaymentProcessorFunctionArn: !GetAtt paymentProcessor.Arn
        OrderAcceptanceResultFunctionArn: !GetAtt orderAcceptanceResult.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref startOrderAcceptance
        - LambdaInvokePolicy:
            FunctionName: !Ref stockChecker
        - LambdaInvokePolicy:
            FunctionName: !Ref paymentProcessor
        - LambdaInvokePolicy:
            FunctionName: !Ref orderAcceptanceResult

  OrderAcceptanceEventIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - Fn::Sub: "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: StateMachineExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "states:StartExecution"
                Resource:
                  - !Ref OrderAcceptanceStateMachine

  OrderCreatedEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Event rule to trigger for create new order events and start the acceptance state machine"
      Name: "OrderCreatedEventRule"
      EventPattern:
        source:
          - com.order-management
        detail-type:
          - create-new-order
      State: "ENABLED"
      Targets:
        - Arn: !Ref OrderAcceptanceStateMachine
          Id: !GetAtt OrderAcceptanceStateMachine.Name
          RoleArn: !GetAtt OrderAcceptanceEventIAMRole.Arn

  OrderMangementWebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: OrderMangementWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref OrderMangementWebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref OrderMangementWebSocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref OrderMangementWebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref DisconnectInteg

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref OrderMangementWebSocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "globalIdentifier"
          AttributeType: "S"
        - AttributeName: "connectionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "globalIdentifier"
          KeyType: "HASH"
        - AttributeName: "connectionId"
          KeyType: "RANGE"
      TableName: order-management-ws-connect

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: app/
      Handler: dist/src/handlers/connect.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: order-management-connections
      Policies:
        - DynamoDBCrudPolicy:
            TableName: order-management-connections

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - OrderMangementWebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: app/
      Handler: dist/src/handlers/disconnect.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: order-management-connections
      Policies:
        - DynamoDBCrudPolicy:
            TableName: order-management-connections

  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - OrderMangementWebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
